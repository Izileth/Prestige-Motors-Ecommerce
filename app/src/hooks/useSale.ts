import { useMemo } from 'react';
import { useSaleStore } from '../store/slices/sales';
import type { SaleData, UpdateSaleData, Sale } from '../types/sale';

const useSale = () => {
    const {
        // Estado
        sales,
        purchases,
        sellerSales,
        vehicleSales,
        currentSale,
        stats,
        transactions,
        loadingStates,
        error,
        success,
        
        // A√ß√µes
        createSale: createSaleAction,
        fetchSaleById: fetchSaleByIdAction,
        updateSale: updateSaleAction,
        fetchPurchasesByUser,
        fetchSalesBySeller,
        fetchSalesByVehicle,
        fetchUserTransactions,
        fetchGlobalSalesStats,
        fetchUserSalesStats,
        clearStats,
        resetSaleState,
        setCurrentSale,
        clearError,
        clearSuccess
    } = useSaleStore();

    // Adiciona o loading geral mantendo compatibilidade
    const enhancedLoadingStates = useMemo(() => ({
        ...loadingStates,
        general: Object.values(loadingStates).some(loading => loading)
    }), [loadingStates]);

    // Opera√ß√µes CRUD com tratamento de erro e logging
    const createSale = async (data: SaleData) => {
        try {
            console.log('üöÄ Creating sale:', data);
            await createSaleAction(data);
            console.log('‚úÖ Sale created successfully');
        } catch (error) {
            console.error("‚ùå Failed to create sale:", error);
            throw error;
        }
  
    };

    const fetchSaleById = async (id: string) => {
        try {
            console.log('üîç Fetching sale:', id);
            await fetchSaleByIdAction(id);
            console.log('‚úÖ Sale fetched successfully');
        } catch (error) {
            console.error("‚ùå Failed to fetch sale:", error);
            throw error;
        }
    };

    const updateSale = async (id: string, data: UpdateSaleData) => {
        try {
            console.log('üîÑ Updating sale:', id, data);
            await updateSaleAction(id, data);
            console.log('‚úÖ Sale updated successfully');
        } catch (error) {
            console.error("‚ùå Failed to update sale:", error);
            throw error;
        }
    };

    // Hist√≥ricos com tratamento de erro
    const getUserTransactions = async (userId: string) => {
        try {
            console.log('üìä Fetching transactions for user:', userId);
            await fetchUserTransactions(userId);
            console.log('‚úÖ Transactions fetched successfully');
        } catch (error) {
            console.error('‚ùå Failed to fetch transactions:', error);
            throw error;
        }
    };

    // Utilit√°rio combinado
    const clearAll = () => {
        console.log('üßπ Clearing all state');
        clearStats();
        resetSaleState();
    };

    return {
        // Estado
        sales,
        purchases,
        sellerSales,
        vehicleSales,
        currentSale,
        stats,
        transactions,
        loadingStates: enhancedLoadingStates,
        error,
        success,
        
        // Opera√ß√µes CRUD
        createSale,
        fetchSaleById,
        updateSale,
        
        // Hist√≥ricos
        fetchPurchasesByUser: fetchPurchasesByUser,
        fetchSalesBySeller,
        fetchSalesByVehicle,
        getUserTransactions,
        
        // Estat√≠sticas
        fetchGlobalSalesStats,
        fetchUserSalesStats,
        
        // Utilit√°rios
        clearStats,
        resetSaleState,
        setCurrentSale,
        clearError,
        clearSuccess,
        clearAll
    };
};

export default useSale;